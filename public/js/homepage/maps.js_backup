//declare map outside of functions incase you want to use it somewhere else.
var map;
var markers = [];
var markerCluster;

function initMap()
{

	//make sure DOM has finished loading
	$(document).ready(function() {

		//get current location.  call initialize when location is grabbed.  could take a few seconds
		navigator.geolocation.getCurrentPosition(initialize);
	});
}

function initialize(position)
{
	//create var to use later.  populate with info from navigator
	var currentLocation = {lat: position.coords.latitude, lng: position.coords.longitude};

	//set any map options here
	var mapOptions = {
		center: currentLocation,
		zoom: 16
	};

	//find the id="map" and place a map within it.  pass in any map options
	map = new google.maps.Map(document.getElementById('map'), mapOptions);

	//init info window.  not used for anything yet
  	var infoWindow = new google.maps.InfoWindow({map: map});
  	//infoWindow.setPosition(currentLocation);


  	//function to drop markers.  clustering is the callback function
  	dropMarkers(markers, clustering);
}

function dropMarkers(markers, callback)
{
  	for (var i = 0; i < locations.length; i++) {

  		//locations are passed in from php json.  variable is defined/populated prior to this .js file.
  		markers.push(addMarkerWithTimeout(locations[i], i * 500));
  		console.log(markers);
    }
    console.log('markers before callback');
    //console dump is showing that markers are being populated correctly.  I believe the problem is with the .push method above
    console.log(markers);
    callback(markers);
}

function addMarkerWithTimeout(position, timeout) {
    window.setTimeout(function() {
      	return new google.maps.Marker({
        	position: position,
        	map: map,
        	animation: google.maps.Animation.DROP
    	});
    }, timeout);
}


function clearMarkers() {
    for (var i = 0; i < markers.length; i++) {
      markers[i].setMap(null);
    }
    markers = [];
  }


//add a marker clusterer to manage the markers.
function clustering(markers)
{
	console.log('markers after callback');
	console.log(markers);

	markerCluster = new MarkerClusterer(map, markers, {
	imagePath: 'images/m'});
}


